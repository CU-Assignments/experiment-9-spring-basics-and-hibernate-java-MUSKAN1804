// HardLevelApp.java
import javax.persistence.*;
import org.springframework.context.annotation.*;
import org.springframework.transaction.annotation.*;
import org.springframework.orm.hibernate5.*;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import java.util.List;
import org.hibernate.SessionFactory;

@Entity
@Table(name = "accounts")
class Account {
    @Id
    private int id;
    private String name;
    private int balance;

    public Account() {}
    public Account(int id, String name, int balance) {
        this.id = id;
        this.name = name;
        this.balance = balance;
    }
    public int getId() { return id; }
    public int getBalance() { return balance; }
    public void setBalance(int balance) { this.balance = balance; }
    public String getName() { return name; }
}

interface BankService {
    void transfer(int fromId, int toId, int amount);
}

class BankServiceImpl implements BankService {
    private SessionFactory sessionFactory;

    public BankServiceImpl(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    @Transactional
    public void transfer(int fromId, int toId, int amount) {
        Session session = sessionFactory.getCurrentSession();

        Account from = session.get(Account.class, fromId);
        Account to = session.get(Account.class, toId);

        if (from.getBalance() < amount) throw new RuntimeException("Insufficient funds!");

        from.setBalance(from.getBalance() - amount);
        to.setBalance(to.getBalance() + amount);

        session.update(from);
        session.update(to);
    }
}

@Configuration
@EnableTransactionManagement
class AppConfig {

    @Bean
    public DriverManagerDataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        ds.setUrl("jdbc:mysql://localhost:3306/test");
        ds.setUsername("root");
        ds.setPassword("yourpassword");
        return ds;
    }

    @Bean
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sf = new LocalSessionFactoryBean();
        sf.setDataSource(dataSource());
        sf.setPackagesToScan("Account");
        sf.setAnnotatedClasses(Account.class);
        sf.getHibernateProperties().put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
        sf.getHibernateProperties().put("hibernate.hbm2ddl.auto", "update");
        return sf;
    }

    @Bean
    public PlatformTransactionManager transactionManager(SessionFactory sf) {
        return new HibernateTransactionManager(sf);
    }

    @Bean
    public BankService bankService(SessionFactory sf) {
        return new BankServiceImpl(sf);
    }
}

public class HardLevelApp {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
        BankService bankService = context.getBean(BankService.class);

        try {
            bankService.transfer(1, 2, 100);  // test transaction
            System.out.println("Transfer successful!");
        } catch (Exception e) {
            System.out.println("Transaction failed: " + e.getMessage());
        }
        context.close();
    }
}
